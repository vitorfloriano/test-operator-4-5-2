name: Alpha Update

permissions:
  contents: write
  issues: write
  pull-requests: write

on:
  workflow_dispatch:
  schedule:
    - cron: "0 0 * * 2" # Every Tuesday at 00:00 UTC

jobs:
  alpha-update:
    runs-on: ubuntu-latest
    env:
      BRANCH_NAME: kubebuilder-alpha-update-${{ github.run_number }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: stable

    - name: Install Kubebuilder
      run: |
        curl -L -o kubebuilder "https://go.kubebuilder.io/dl/latest/$(go env GOOS)/$(go env GOARCH)"
        chmod +x kubebuilder
        sudo mv kubebuilder /usr/local/bin/

    - name: Configure Git
      run: |
        git config --local user.name "github-actions[bot]"
        git config --local user.email "github-actions[bot]@users.noreply.github.com"

    - name: Extract current version
      id: current-version
      run: |
        if [ -f "PROJECT" ]; then
          current_version=$(grep "cliVersion:" PROJECT | awk '{print $2}' | sed 's/^v//')
          echo "current_version=$current_version" >> $GITHUB_OUTPUT
        else
          echo "PROJECT file not found"
          exit 1
        fi

    - name: Fetch latest version
      id: latest-version
      run: |
        latest_version=$(curl -s https://api.github.com/repos/kubernetes-sigs/kubebuilder/releases/latest \
          | jq -r '.tag_name' | sed 's/^v//')
        echo "latest_version=$latest_version" >> $GITHUB_OUTPUT

    - name: Compare versions
      id: version-check
      run: |
        current="${{ steps.current-version.outputs.current_version }}"
        latest="${{ steps.latest-version.outputs.latest_version }}"
        if [ "$current" != "$latest" ]; then
          echo "update_needed=true" >> $GITHUB_OUTPUT
        else
          echo "update_needed=false" >> $GITHUB_OUTPUT
        fi

    - name: Run kubebuilder alpha update
      if: steps.version-check.outputs.update_needed == 'true'
      run: |
        kubebuilder alpha update \
        --from-version v${{ steps.current-version.outputs.current_version }} \
        --to-version v${{ steps.latest-version.outputs.latest_version }} \
        --force

    - name: Restore workflows directory
      if: steps.version-check.outputs.update_needed == 'true'
      run: |
        git restore --source=main --staged --worktree .github/workflows || true

    - name: Soft reset last 4 commits and checkout main
      if: steps.version-check.outputs.update_needed == 'true'
      run: |
        git reset --soft HEAD~4
        git add -A
        git checkout main

    - name: Create PR with peter-evans
      id: cpr
      if: steps.version-check.outputs.update_needed == 'true'
      uses: peter-evans/create-pull-request@v7.0.8
      continue-on-error: true
      with:
        branch: ${{ env.BRANCH_NAME }}
        title: >
          (chore) Update Kubebuilder scaffold 
          from v${{ steps.current-version.outputs.current_version }}
          to v${{ steps.latest-version.outputs.latest_version }}
        body: "Automated update via workflow."

    - name: Prepare issue body
      if: steps.version-check.outputs.update_needed == 'true' && (steps.cpr.outcome == 'failure' || !steps.cpr.outputs.pull-request-url)
      run: |
        cat > issue_body.md <<EOF
        ## Kubebuilder update needed

        Automated PR failed this run.

        **Current:** v${{ steps.current-version.outputs.current_version }}
        **Latest:** v${{ steps.latest-version.outputs.latest_version }}

        Open a PR manually from this branch:
        https://github.com/${{ github.repository }}/pull/new/${{ env.BRANCH_NAME }}

        _This issue was created by the Alpha Update workflow._
        EOF

    - name: Find existing update issue
      id: find-issue
      if: steps.version-check.outputs.update_needed == 'true' && (steps.cpr.outcome == 'failure' || !steps.cpr.outputs.pull-request-url)
      run: |
        num=$(gh issue list --state open --search "Update Kubebuilder" --json number,title \
          | jq -r '.[] | select(.title | contains("Update Kubebuilder")) | .number' | head -1)
        echo "number=$num" >> $GITHUB_OUTPUT
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Create issue (fallback)
      if: steps.version-check.outputs.update_needed == 'true' && (steps.cpr.outcome == 'failure' || !steps.cpr.outputs.pull-request-url) && steps.find-issue.outputs.number == ''
      run: |
        gh issue create \
          --title "Update Kubebuilder from v${{ steps.current-version.outputs.current_version }} to v${{ steps.latest-version.outputs.latest_version }}" \
          --body-file issue_body.md \
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Update existing issue (fallback)
      if: steps.version-check.outputs.update_needed == 'true' && (steps.cpr.outcome == 'failure' || !steps.cpr.outputs.pull-request-url) && steps.find-issue.outputs.number != ''
      run: |
        gh issue edit ${{ steps.find-issue.outputs.number }} \
          --title "Update Kubebuilder from v${{ steps.current-version.outputs.current_version }} to v${{ steps.latest-version.outputs.latest_version }}" \
          --body-file issue_body.md
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
